!function(e){function __webpack_require__(n){if(t[n])return t[n].exports;var s=t[n]={exports:{},id:n,loaded:!1};return e[n].call(s.exports,s,s.exports,__webpack_require__),s.loaded=!0,s.exports}var t={};return __webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.p="",__webpack_require__(0)}([function(e,t,n){(function(e){"use strict";var t=n(2),s=n(3),o=n(4),r=function(){function Signaler(){var e=this;this.useDebug=!0,this.useLog=!0,this.server=t.createServer(),this.io=s(this.server),this.io.on("connection",function(t){e.log(t,"connected"),t.on(o.PeersRequest.messageType,function(n){e.log(t,o.PeersRequest.messageType,n),e.ensurePad(t,n.padId)&&(t.broadcast.to(n.padId).emit(o.PeersRequest.messageType,n),e.debug(t,o.PeersRequest.messageType," forwarded"))}),t.on(o.PeersUpdate.messageType,function(n){e.log(t,o.PeersUpdate.messageType,n),e.ensurePad(t,n.padId)&&(t.broadcast.to(n.padId).emit(o.PeersUpdate.messageType,n),e.debug(t,o.PeersUpdate.messageType," forwarded"))}),t.on(o.ConnectionRequest.messageType,function(n){e.log(t,o.ConnectionRequest.messageType,n),e.ensurePad(t,n.padId)&&(t.broadcast.to(n.padId).emit(o.ConnectionRequest.messageType,n),e.debug(t,o.ConnectionRequest.messageType," forwarded"))}),t.on(o.ConnectionResponse.messageType,function(n){e.log(t,o.ConnectionResponse.messageType,n),e.ensurePad(t,n.padId)&&(t.broadcast.to(n.padId).emit(o.ConnectionResponse.messageType,n),e.debug(t,o.ConnectionResponse.messageType," forwarded"))}),t.on("disconnect",function(){e.log(t," disconnected")})})}return Signaler.prototype.start=function(e,t){void 0===e&&(e=o.getSignalerPort()),void 0===t&&(t=o.getSignalerHost()),this.server.listen(e,t),console.log("Signaler listening on "+t+":"+e)},Signaler.prototype.debug=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.log.apply(this,[e,"sent DEBUG: "].concat(t)),this.useDebug&&e.emit("DEBUG",t?t.join(""):"")},Signaler.prototype.log=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.useLog&&console.log.apply(console,[e.id].concat(t))},Signaler.prototype.isValidPad=function(e){return!!e},Signaler.prototype.ensurePad=function(e,t){return this.isValidPad(t)?(e.join(t),!0):(this.debug(e," invalid pad!"),!1)},Signaler}();n.c[0]===e&&(new r).start()}).call(t,n(1)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("socket.io")},function(e,t){"use strict";function getSignalerURI(){return getSignalerProtocol()+"://"+getSignalerHost()+":"+getSignalerPort()}function getSignalerHost(){return process.env.NODE_IP||n?"127.0.0.1":s}function getSignalerPort(){return process.env.NODE_PORT||n?3e3:o}function getSignalerProtocol(){return n?"http":"https"}var n=!1,s="bpsignaler-rmnoon.rhcloud.com",o=8443,r=function(){function PeersRequest(){}return PeersRequest.messageType="PeersRequest",PeersRequest}();t.PeersRequest=r;var a=function(){function PeersUpdate(){}return PeersUpdate.messageType="PeersUpdate",PeersUpdate}();t.PeersUpdate=a;var i=function(){function ConnectionRequest(){}return ConnectionRequest.messageType="ConnectionRequest",ConnectionRequest}();t.ConnectionRequest=i;var u=function(){function ConnectionResponse(){}return ConnectionResponse.messageType="ConnectionResponse",ConnectionResponse}();t.ConnectionResponse=u;var c=function(){function PadUpdate(){}return PadUpdate.messageType="PadUpdate",PadUpdate}();t.PadUpdate=c;var p=function(){function UserStatusRequest(){}return UserStatusRequest.messageType="UserStatusRequest",UserStatusRequest}();t.UserStatusRequest=p;var g=function(){function UserStatusResponse(){}return UserStatusResponse.messageType="UserStatusResponse",UserStatusResponse}();t.UserStatusResponse=g;var d=function(){function PadEdit(){}return PadEdit}();t.PadEdit=d;var l=function(){function Cursor(){}return Cursor}();t.Cursor=l,t.getSignalerURI=getSignalerURI,t.getSignalerHost=getSignalerHost,t.getSignalerPort=getSignalerPort,t.getSignalerProtocol=getSignalerProtocol}]);